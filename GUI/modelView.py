from tensorflow.keras. import layers
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QStackedWidget, QFormLayout, QLabel, QLineEdit, QComboBox, QMessageBox, QDesktopWidget, QStatusBar

layers = {
    'AbstractRNNCell': layers.AbstractRNNCell,
    'Activation': layers.Activation,
    'ActivityRegularization': layers.ActivityRegularization,
    'Add': layers.Add,
    'add': layers.add,
    'AdditiveAttention': layers.AdditiveAttention,
    'AlphaDropout': layers.AlphaDropout,
    'Attention': layers.Attention,
    'Average': layers.Average,
    'average': layers.average,
    'AveragePooling1D': layers.AveragePooling1D,
    'AveragePooling2D': layers.AveragePooling2D,
    'AveragePooling3D': layers.AveragePooling3D,
    'BatchNormalization': layers.BatchNormalization,
    'Bidirectional': layers.Bidirectional,
    'Concatenate': layers.Concatenate,
    'concatenate': layers.concatenate,
    'Conv1D': layers.Conv1D,
    'Conv1DTranspose': layers.Conv1DTranspose,
    'Conv2D': layers.Conv2D,
    'Conv2DTranspose': layers.Conv2DTranspose,
    'Conv3D': layers.Conv3D,
    'Conv3DTranspose': layers.Conv3DTranspose,
    'ConvLSTM2D': layers.ConvLSTM2D,
    'Cropping1D': layers.Cropping1D,
    'Cropping2D': layers.Cropping2D,
    'Cropping3D': layers.Cropping3D,
    'Dense': layers.Dense,
    'DenseFeatures': layers.DenseFeatures,
    'DepthwiseConv2D': layers.DepthwiseConv2D,
    'deserialize': layers.deserialize,
    'Dot': layers.Dot,
    'dot': layers.dot,
    'Dropout': layers.Dropout,
    'ELU': layers.ELU,
    'Embedding': layers.Embedding,
    'Flatten': layers.Flatten,
    'GaussianDropout': layers.GaussianDropout,
    'GaussianNoise': layers.GaussianNoise,
    'GlobalAveragePooling1D': layers.GlobalAveragePooling1D,
    'GlobalAveragePooling2D': layers.GlobalAveragePooling2D,
    'GlobalAveragePooling3D': layers.GlobalAveragePooling3D,
    'GlobalMaxPool1D': layers.GlobalMaxPool1D,
    'GlobalMaxPool2D': layers.GlobalMaxPool2D,
    'GlobalMaxPool3D': layers.GlobalMaxPool3D,
    'GRU': layers.GRU,
    'GRUCell': layers.GRUCell,
    'InputLayer': layers.InputLayer,
    'InputSpec': layers.InputSpec,
    'Lambda': layers.Lambda,
    'Layer': layers.Layer,
    'LayerNormalization': layers.LayerNormalization,
    'LeakyReLU': layers.LeakyReLU,
    'LocallyConnected1D': layers.LocallyConnected1D,
    'LocallyConnected2D': layers.LocallyConnected2D,
    'LSTM': layers.LSTM,
    'LSTMCell': layers.LSTMCell,
    'Masking': layers.Masking,
    'Maximum': layers.Maximum,
    'maximum': layers.maximum,
    'MaxPool1D': layers.MaxPool1D,
    'MaxPool2D': layers.MaxPool2D,
    'MaxPool3D': layers.MaxPool3D,
    'Minimum': layers.Minimum,
    'minimum': layers.minimum,
    'MultiHeadAttention': layers.MultiHeadAttention,
    'Multiply': layers.Multiply,
    'multiply': layers.multiply,
    'Permute': layers.Permute,
    'PReLU': layers.PReLU,
    'ReLU': layers.ReLU,
    'RepeatVector': layers.RepeatVector,
    'Reshape': layers.Reshape,
    'RNN': layers.RNN,
    'SeparableConv1D': layers.SeparableConv1D,
    'SeparableConv2D': layers.SeparableConv2D,
    'serialize': layers.serialize,
    'SimpleRNN': layers.SimpleRNN,
    'SimpleRNNCell': layers.SimpleRNNCell,
    'Softmax': layers.Softmax,
    'SpatialDropout1D': layers.SpatialDropout1D,
    'SpatialDropout2D': layers.SpatialDropout2D,
    'SpatialDropout3D': layers.SpatialDropout3D,
    'StackedRNNCells': layers.StackedRNNCells,
    'Subtract': layers.Subtract,
    'subtract': layers.subtract,
    'ThresholdedReLU': layers.ThresholdedReLU,
    'TimeDistributed': layers.TimeDistributed,
    'UpSampling1D': layers.UpSampling1D,
    'UpSampling2D': layers.UpSampling2D,
    'UpSampling3D': layers.UpSampling3D,
    'Wrapper': layers.Wrapper,
    'ZeroPadding1D': layers.ZeroPadding1D,
    'ZeroPadding2D': layers.ZeroPadding2D,
    'ZeroPadding3D': layers.ZeroPadding3D,
        'EinsumDense': layers.experimental.EinsumDense,
        'RandomFourierFeatures': layers.experimental.RandomFourierFeatures,
        'SyncBatchNormalization': layers.experimental.SyncBatchNormalization,
            'CategoryCrossing': layers.experimental.preprocessing.CategoryCrossing,
            'CategoryEncoding': layers.experimental.preprocessing.CategoryEncoding,
            'CenterCrop': layers.experimental.preprocessing.CenterCrop,
            'Discretization': layers.experimental.preprocessing.Discretization,
            'Hashing': layers.experimental.preprocessing.Hashing,
            'IntegerLookup': layers.experimental.preprocessing.IntegerLookup,
            'Normalization': layers.experimental.preprocessing.Normalization,
            'PreprocessingLayer': layers.experimental.preprocessing.PreprocessingLayer,
            'RandomContrast': layers.experimental.preprocessing.RandomContrast,
            'RandomCrop': layers.experimental.preprocessing.RandomCrop,
            'RandomFlip': layers.experimental.preprocessing.RandomFlip,
            'RandomHeight': layers.experimental.preprocessing.RandomHeight,
            'RandomRotation': layers.experimental.preprocessing.RandomRotation,
            'RandomTranslation': layers.experimental.preprocessing.RandomTranslation,
            'RandomWidth': layers.experimental.preprocessing.RandomWidth,
            'RandomZoom': layers.experimental.preprocessing.RandomZoom,
            'Rescaling': layers.experimental.preprocessing.Rescaling,
            'Resizing': layers.experimental.preprocessing.Resizing,
            'StringLookup': layers.experimental.preprocessing.StringLookup,
            'TextVectorization': layers.experimental.preprocessing.TextVectorization,
    }

class Inspector(QWidget):

    def __init__(self): pass

class Palette(QWidget):

    def __init__(self): pass

class Layer(QWidget): 
    
    def __init__(self): pass

Qapp = QApplication([])

layer = Layer()
layer.show()

Qapp.exec_()